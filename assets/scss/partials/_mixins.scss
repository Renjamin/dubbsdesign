// Mixins

@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    #{$property}: $value;
  }
}

@function get-vw($target) {
  $vw-context: ($max-breakpoint * 0.01) * 1px;
  @return ($target/$vw-context) * 1vw;
}

@mixin vw($size) {
  font-size: get-vw($size);

  @media #{$wide-screen} {
    font-size: $size;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
}

@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin transition($element, $speed, $flow) {
  -webkit-transition: $element $speed $flow;
  -moz-transition: $element $speed $flow;
  -ms-transition: $element $speed $flow;
  -o-transition: $element $speed $flow;
  transition: $element $speed $flow;
}

@mixin rounded($radius: 0.5em) {
  border-top-left-radius: $radius !important;
  border-top-right-radius: $radius !important;
  border-bottom-left-radius: $radius !important;
  border-bottom-right-radius: $radius !important;
  -webkit-border-radius: $radius $radius $radius $radius !important;
  -moz-border-radius: $radius $radius $radius $radius !important;
}

@mixin circle($circle-width, $circle-border-width, $circle-border-type) {
  width: $circle-width;
  height: $circle-width;
  border-width: $circle-border-width;
  border-style: $circle-border-type;
  border-radius: $circle-width/2 + $circle-border-width;
  -webkit-border-radius: $circle-width/2 + $circle-border-width;
  -moz-border-radius: $circle-width/2 + $circle-border-width;
}

@mixin parallax-background($par-bg-color, $par-bg-img, $par-bg-height) {
  height: $par-bg-height;
  background: $par-bg-color image-url($par-bg-img) center center no-repeat;
  background-attachment: fixed;
  background-size: cover;
}

@mixin shadow {
  -webkit-box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
  -moz-box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
  box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
}

@mixin shadow-custom($offset-x, $offset-y, $blur-radius, $spread-radius, $color) {
  -webkit-box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
  -moz-box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
  box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
}

@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } 
  
  @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } 
  
  @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin gradient-angle($angle, $start-color, $end-color) {
  background-color: $start-color;
  background-size: 100%;
  background-image: -moz-linear-gradient($angle, $start-color 0%, $end-color 100%);
  background-image: -webkit-linear-gradient($angle, $start-color 0%, $end-color 100%);
  background-image: linear-gradient($angle, $start-color 0%, $end-color 100%);
}

// Flexbox Mixins

// fg = flex grow, fs = flex-shrink, fb = flex-basis
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box: $fg-boxflex;
  -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } 
  
  @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } 
  
  @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } 
  
  @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }

  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  -webkit-flex-wrap: $value;
  
  @if $value == nowrap {
    -ms-flex-wrap: none;
  }

  @else if $value == wrap {
    @include clearfix;
  }
  
  @else {
    -ms-flex-wrap: $value;
  }

  flex-wrap: $value;
}

@mixin flex-order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-grow($int: 1) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } 
  
  @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } 
  
  @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } 
  
  @else if $value == space-around {
    -ms-flex-pack: distribute;
  }
  
  @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }

  -webkit-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } 
  
  @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } 
  
  @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }

  -webkit-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;

  @if $value == flex-start {
    -ms-flex-item-align: start;
  } 
  
  @else if $value == flex-end {
    -ms-flex-item-align: end;
  } 
  
  @else {
    -ms-flex-item-align: $value;
  }
  
  align-self: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;

  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } 
  
  @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } 
  
  @else {
    -ms-flex-line-pack: $value;
  }
  
  align-content: $value;
}
