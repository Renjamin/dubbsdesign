// Mixins

@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    #{$property}: $value;
  }
}

@function em($target, $context: $base-font-size) {
  @return ($target / $context) * 1em;
}

@function get-vw($target) {
  $vw-context: ($max-breakpoint * 0.01) * 1px;
  @return ($target/$vw-context) * 1vw;
}

@mixin vw($size) {
  font-size: get-vw($size);
  @media #{$wide-screen} {
    font-size: $size;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
}

@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin transition($element, $speed, $flow) {
  -webkit-transition: $element $speed $flow;
  -moz-transition: $element $speed $flow;
  -ms-transition: $element $speed $flow;
  -o-transition: $element $speed $flow;
  transition: $element $speed $flow;
}

@mixin rounded($radius: 0.5em) {
  border-top-left-radius: $radius !important;
  border-top-right-radius: $radius !important;
  border-bottom-left-radius: $radius !important;
  border-bottom-right-radius: $radius !important;
  -webkit-border-radius: $radius $radius $radius $radius !important;
  -moz-border-radius: $radius $radius $radius $radius !important;
}

@mixin circle($circle-width, $circle-border-width, $circle-border-type) {
  width: $circle-width;
  height: $circle-width;
  border-width: $circle-border-width;
  border-style: $circle-border-type;
  border-radius: $circle-width/2 + $circle-border-width;
  -webkit-border-radius: $circle-width/2 + $circle-border-width;
  -moz-border-radius: $circle-width/2 + $circle-border-width;
}

@mixin parallax-background($par-bg-color, $par-bg-img, $par-bg-height) {
  height: $par-bg-height;
  background: $par-bg-color image-url($par-bg-img) center center no-repeat;
  background-attachment: fixed;
  background-size: cover;
}

@mixin shadow {
  -webkit-box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
  -moz-box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
  box-shadow: 0 3px 8px -1px rgba(0, 0, 0, 0.25);
}

@mixin shadow-custom($offset-x, $offset-y, $blur-radius, $spread-radius, $color) {
  -webkit-box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
  -moz-box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
  box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;
}

@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin gradient-angle($angle, $start-color, $end-color) {
  background-color: $start-color;
  background-size: 100%;
  background-image: -moz-linear-gradient($angle, $start-color 0%, $end-color 100%);
  background-image: -webkit-linear-gradient($angle, $start-color 0%, $end-color 100%);
  background-image: linear-gradient($angle, $start-color 0%, $end-color 100%);
}



